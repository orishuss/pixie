// Code generated for package complete by go-bindata DO NOT EDIT. (@generated)
// sources:
// 01_base_schema.graphql
// 02_unauth_schema.graphql
// 03_auth_schema.graphql
package complete

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_base_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\xa0\x14\x54\x5c\x2a\x10\x4a\x49\x4f\x81\xe0\x07\x1c\x7b\x38\x47\x72\xbc\x3e\xef\x46\x47\x84\xf8\x77\x94\xcb\x5d\x77\xd5\x6c\x31\xf3\xb4\x4f\x43\xe2\xec\xf1\xeb\x80\xd3\xc2\xb6\x0e\xf8\xd8\xc2\x01\xf3\x62\xde\x26\x29\x03\xde\xaf\x97\xfb\x73\xae\xc3\x57\x22\xb4\x32\x20\x0a\xb5\x3c\x1a\x7c\xce\x72\x06\xe7\x6a\x2b\x6c\xad\xd4\x83\xeb\xf0\x29\x38\x13\xa1\xd1\x1b\x51\x7d\x0e\x4c\x92\x23\x9b\x22\xb1\x11\xbe\xc4\xeb\xce\x12\x95\xfb\x0e\x26\x18\xe9\x3a\xf0\xc7\x58\x22\x23\xc6\x15\x62\x89\x0d\xdf\x53\xde\xb9\xc9\xac\xea\xd0\xf7\xc7\xc9\xd2\x32\x1e\x82\xcc\xfd\xb1\xf9\x9a\x4e\xf9\x96\x4f\xdb\x73\xfd\xa4\xba\x50\xfb\xe7\x97\x57\xe7\x36\xf8\xae\x75\xf1\x2c\x22\x75\xc0\x9b\x48\xa6\x2f\x0f\x9b\xd4\xa5\x70\xb3\xbc\xdf\xf9\x0f\x00\x00\xff\xff\x6f\xc4\xb8\xef\x28\x01\x00\x00")

func _01_base_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__01_base_schemaGraphql,
		"01_base_schema.graphql",
	)
}

func _01_base_schemaGraphql() (*asset, error) {
	bytes, err := _01_base_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_base_schema.graphql", size: 296, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_unauth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xb1\x0a\xc2\x40\x0c\x86\xf7\x7b\x8a\xdc\x56\x5f\xe1\x36\x1d\x84\x0e\x0a\xa2\x9b\x38\x84\x9a\xd6\x60\x2f\x29\x77\xb1\x58\xc4\x77\x17\x0b\xa5\x15\xb7\x9f\xe4\xfb\xbf\x9f\x9e\x46\x72\x05\x1b\x3a\x82\xc3\x83\xd2\x00\x2f\x07\x80\xc9\xb8\xc6\xca\x72\x31\xa5\x3d\x46\x0a\x70\xb4\xc4\xd2\xf8\x55\x80\xf5\x44\x94\x52\xab\x77\x00\x3d\x25\xae\x87\x52\x7a\x36\x3a\xe9\x9d\xa4\xe0\x39\x2f\x9b\x1b\xd5\x96\x50\xbc\x7b\x3b\x37\xce\xfe\xa8\xc6\x79\x36\x8a\x39\xc0\x79\xfa\xf8\xcb\x3f\x3d\x82\x3d\xa5\xcc\x3a\xeb\x1d\x40\x75\x43\x69\xa8\xd5\x66\x79\x34\x8e\x94\x0d\x63\xb7\xcb\x01\xb6\xad\xa2\x7d\x85\x9f\x00\x00\x00\xff\xff\xef\x77\x02\x34\xfc\x00\x00\x00")

func _02_unauth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__02_unauth_schemaGraphql,
		"02_unauth_schema.graphql",
	)
}

func _02_unauth_schemaGraphql() (*asset, error) {
	bytes, err := _02_unauth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_unauth_schema.graphql", size: 252, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_auth_schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\xdd\x8f\xe3\xb6\x11\x7f\xf7\x5f\x31\x97\x7b\xc8\x2e\xb0\x3d\x04\x45\x13\x14\xfb\x54\xc5\xd6\xe5\xd4\xdd\xf5\xba\xb6\x37\x69\x10\x1c\x0e\xb4\x34\xb6\x88\x95\x48\x85\xa4\xbc\xeb\x16\xf9\xdf\x8b\x21\x29\x89\x94\xb5\xf7\xd5\xa2\x6f\x16\x3f\x66\x7e\xf3\xc1\xf9\x20\x8d\xcf\x06\x45\x01\xe6\xd4\x20\xfc\xa3\x45\x75\x82\x7f\xcf\x00\x5a\x8d\xea\x1a\x1e\x34\xaa\x4c\xec\xe5\xab\x19\x80\x54\x87\x6b\xb8\x57\x87\xee\x9b\x56\x6c\xd0\x18\x2e\x0e\xda\xad\xec\xbe\xba\xd9\xc4\x18\xc5\x77\xad\x41\x3f\x3f\x7c\x7b\x7a\x34\xa8\xaf\xe1\xb7\x9e\xcd\x7b\x9a\xc8\xab\x56\x1b\x54\x17\xbc\xb8\x86\x6c\xf1\xea\xf2\x1a\xe6\x6e\xa4\xe3\xec\x17\xfc\x78\x5a\xb2\x1a\x2f\x04\xab\xf1\x1a\x36\x46\x71\x71\x78\x79\x31\xb1\x09\x67\x42\x4e\x73\x29\x04\xe6\x86\x4b\x71\xce\x73\x98\x1b\x08\xf2\x44\x19\xbe\x67\xb9\xb9\x60\xfe\xc7\xf6\xd4\xe0\x35\x24\xc1\x97\x25\x71\x9b\x75\x43\xb4\x91\xb5\x46\xe6\xb2\x6e\x2a\x34\x78\xc1\x45\xd3\x9a\x0e\xf6\x15\xe4\xad\xd2\x52\xad\xa4\xbe\x86\x4c\x98\x2b\x60\x96\xe5\x35\x24\xc1\x9e\xc4\x8e\x11\xf1\xab\x0e\xf9\x43\xb6\xe8\x68\x5c\xc6\x8b\xd7\xa8\xdb\xea\x8c\xed\x5b\x8e\x55\x31\xe6\xbd\xa7\x41\x2f\x41\xb0\x36\x15\x86\x9b\xd3\x0d\x17\xc5\xd5\x0c\x00\x40\xe1\xef\x2d\x57\x58\x24\xea\x40\x8b\x49\xa1\xd3\xcb\xdf\x7f\x06\x3c\x0b\xa4\xc3\x38\x03\x78\x0d\x9b\x5c\xf1\xc6\xd4\x07\x05\x28\x8a\x46\x72\x61\xf4\x15\x28\xdc\xa3\x02\x23\xa1\x90\xb9\x06\x2e\x20\xaf\x64\x5b\xb0\x86\xbf\x69\x94\x34\x72\x06\x50\xf1\x23\xfe\xcc\xf1\x89\xe0\xdc\xfa\xdf\x77\x68\x58\xc1\x0c\x73\x46\xee\x56\xcc\xa5\x30\x28\x8c\x0e\x6c\x7c\x3b\x9a\xa2\xe5\xda\xe2\x20\x72\x0e\x51\x4c\xcc\xcd\x4e\x90\xda\x44\x13\x5e\xa6\x05\x36\x95\x3c\xc1\x23\x9e\xf4\x0c\xa0\xb0\x5f\x35\x0a\x73\x83\x27\x62\xb0\x08\x07\x62\x3e\xd1\xda\x80\x4d\xb4\xc5\x73\x49\x56\x59\xc7\x82\x35\xdc\xd3\x4e\x56\xd9\x19\x51\x37\x1b\x50\x73\x8b\x3c\x99\x55\xd5\x1e\xb8\x98\x01\x34\xf6\x87\xbe\x78\xe4\xa2\xb8\xf6\xc3\x64\xd7\xcb\x6b\xf8\xcd\x7d\x39\x72\x0a\x49\x56\x2e\x85\x1b\xa4\xf3\x61\x69\xfb\xa3\x78\xe5\x09\xfd\x8c\x4a\x5b\x5f\x1e\x8e\xe8\xb0\xe1\x95\x65\xbd\x2d\xb9\x86\x27\x5e\x55\xb0\x43\x50\xd8\x54\x2c\xc7\x02\x76\xa7\x31\x8b\xb9\x14\x7b\x7e\x00\x29\x72\x04\x56\x55\x90\x4b\xa1\xdb\x1a\x95\x86\x92\x1d\x11\x76\x88\x02\xda\xa6\x60\x06\x8b\x37\x2e\xc2\xac\xa7\x08\x84\x28\x07\xa1\xdc\xdc\xa4\x68\x93\xdb\x26\x49\x47\x9b\x37\xbd\x2b\xad\xe3\xa1\x11\x13\x37\x38\x22\xbf\x40\xc3\x78\x85\xc5\x78\xeb\xec\x8f\xd9\x2c\x0c\xd9\x77\xad\x61\x34\x6d\xa3\xf6\x5c\x21\x33\xe8\x43\x57\x14\x0a\xe1\x6f\x05\x36\x0a\x73\xd2\xcd\x85\x42\xa6\xc9\x22\xdf\xf8\x05\x1a\x98\x42\x10\xf2\x09\x72\x4b\xa0\x80\x23\x67\xd0\x3c\x7b\x37\xfc\xe6\xb2\x27\x1d\xf9\xdf\x99\x3b\x02\x2c\x90\x4e\xf7\xe2\x05\xef\xfd\x51\xca\x0a\x99\x78\xd5\x93\x73\x0e\x38\x38\x62\x47\xc0\x7d\x4f\xef\x7c\xb0\x06\x0e\xf3\xcd\x85\xee\xd3\x50\x5a\x70\xc3\x76\x55\x34\x4d\xfb\xc7\xe9\x69\x83\x26\xce\x48\x17\x2c\x48\x56\x21\x95\x20\x69\x5d\x4e\xa5\xb1\x4c\x1c\xb9\x83\x73\x81\x35\xe3\x55\xe0\xff\x7b\xae\xb4\x59\x86\xe9\xe9\x0a\x2a\x36\x1a\xba\xec\xb2\x2c\x91\x89\xe5\x5b\xa1\xaa\xb9\xa6\xc3\xa3\x2f\x28\x9f\x52\x34\xcd\x16\xaf\xae\x6c\x72\x0d\x26\x63\xc0\xc1\xc4\x40\xdc\x9d\x34\xa7\xf4\x7b\x75\xb8\x90\xea\x30\x46\x91\x2d\x06\xee\xf7\xea\xd0\x2b\x57\xaa\x43\xcf\x58\x0e\xe3\x03\xd3\x60\x31\xd1\x09\x4a\x04\xc7\xcf\x89\xb6\x95\x8f\x28\x02\x62\x97\x3d\xef\x19\xc0\x1a\x8f\xf2\x11\x93\xaa\x0a\xd6\xea\x78\x71\xe0\x01\x6b\xac\xe5\xd1\xca\xfa\x56\xc9\x9a\xc4\x09\xb4\x13\x2e\x8d\xe3\x9a\x13\xed\x93\x11\xe1\x0a\x50\x90\x58\x45\x4f\xa8\x1f\x19\x85\xb2\x2b\x0a\x40\x7b\x1e\xea\x22\x24\xaa\x27\x1d\x77\x3d\x71\xea\xad\x6e\x5d\x6a\x19\x48\x8d\x16\x4e\x1d\x9f\x31\xad\x4f\x93\x70\x46\x76\x87\xec\x05\x24\x21\xa3\x3f\x66\x33\x1b\x64\x3a\x27\xb2\x41\xc6\xaf\x9b\x01\x44\xa5\xd7\x0c\x20\x3e\x00\x94\x4a\x78\x6e\x5a\x15\xad\x19\x7b\x9e\x1b\x1a\x0a\x05\x1a\xe0\x3a\x69\x1a\x25\x8f\x81\x0d\x06\x2c\xd9\x22\x5d\x31\x53\x5a\x28\xd9\x22\x1d\x13\x6b\x98\x29\x87\xef\x6e\x93\x77\xca\x4f\xe0\x2f\x64\xcd\xb8\x18\x53\x74\xc6\x77\x88\x58\xa5\x23\x3b\xf0\x02\x09\x0c\xc5\x78\x8f\x8b\x62\x7b\xa8\xb6\xee\x68\x58\xd6\x4c\xb0\xea\x64\x78\xae\xef\x1b\x23\xa9\x06\x8b\x48\x39\x58\xe1\xe6\x21\xd4\xd8\xed\x46\xb6\x6a\x83\x28\x5e\xda\x67\x0b\xbb\x17\xa2\xd7\x34\x81\xe9\x5d\x9f\x85\xb9\x07\x1a\x97\x1a\x23\x15\xfb\x84\x92\x98\x3b\x7d\x0d\x6f\x2b\xc9\x8c\x2b\x6f\x74\x7e\x6e\x24\x47\x68\x44\xe0\x91\xf2\xc3\x60\x8c\x2f\xa1\x37\x59\x5f\xfd\x17\xf8\x22\x7a\xff\x13\x98\x28\xda\x7a\xa2\xe8\xde\x18\x66\xd0\x32\x48\xd2\xcd\x87\x87\xe5\xcd\xf2\xfe\x97\xa5\xff\x5a\xa5\xcb\x45\xb6\xfc\xc9\x7f\xad\x1f\x96\xcb\xe1\xeb\x6d\x92\xdd\xa6\x0b\xff\xb1\x4d\xd7\x77\xd9\x32\xd9\xa6\x8b\x49\x4e\x43\x37\xe1\x18\x25\xdb\x80\xd1\x6b\x48\x04\x60\xc1\x8d\x6f\x44\x40\xe6\xd4\xa1\x00\xdf\x03\xb3\xd9\x07\x4a\xa6\xa1\x96\x05\xdf\x73\x2c\xc0\x94\x08\xce\x8b\x0c\x3e\x1b\x2a\xdc\xb8\xd0\xa8\xc8\x87\x40\x2a\x28\x28\xdc\xd0\xef\xbc\x64\x8a\xe5\x54\x70\xbc\x19\xea\x3e\x2e\xf2\xaa\x2d\x50\x53\x39\x63\x37\x08\x4b\xef\x11\x4f\x3b\xc9\x54\x01\x4c\x14\xd0\x30\xed\x08\xc8\xba\x66\xa2\xb0\xdb\x09\x71\xba\xc8\xb6\x0e\x2e\x68\xac\x30\x1f\xf0\x8a\xea\x34\x0d\x3a\x2f\xa5\x46\x01\x4c\x44\x8d\x11\xe8\xf6\x70\x40\x4d\x7b\xdf\x74\xb0\x0a\x4e\xd5\x92\x06\xdb\x67\xbc\xb6\xa0\xa2\x2d\xa6\x64\x06\xb8\x01\x5d\xca\xb6\x2a\x80\x72\x92\x5d\x44\xac\xbe\xd5\xbe\xa5\xa3\xe6\x85\x06\x05\x29\x86\x51\x0c\x69\x14\x27\xeb\x1a\xb6\xeb\xa4\xd8\xa4\xb7\xe9\x7c\xfb\x11\x7f\xa0\xea\xdb\xbb\xc3\x4d\xe4\x0e\x37\x1f\x56\xf7\x0b\xff\x6b\xf3\xf3\xbc\xfb\x35\x5f\x67\xab\xad\xff\x58\x26\x77\xe9\x66\x95\xcc\xd3\xee\xfb\x7e\x91\x0e\x27\x2e\x60\xb5\xe9\x35\x60\x59\xb9\xea\x7f\x1a\xcb\x28\x74\x7a\xcf\xa6\x24\x12\x64\xc7\x19\x40\xcd\x4c\x5e\x62\x91\x89\x02\x9f\x6d\xc3\x98\x09\xf3\x9e\xba\x28\xf2\xef\x29\xe2\xd6\xf1\x7b\x74\x5b\xb6\x1b\x81\x22\x97\x21\x57\x2b\xf0\x19\xe4\xde\x2a\xd6\xb0\x9d\xb3\x84\x29\x51\x87\x76\x74\x45\xed\x5e\x2a\x52\xb3\x61\x3b\x8b\xc2\xb6\xd7\x96\xd0\x2f\x25\x9a\x12\x95\xf7\x1b\x72\x2e\x16\x6c\xa6\x7d\x60\xc8\x0f\x88\xbe\x63\x68\x1b\x94\x9a\x3d\x3a\x2b\x7b\x57\x04\x7c\xc6\xbc\xb5\x91\x93\xf8\x0c\x5f\xc9\xde\x50\x20\x25\xe2\x43\xc8\x84\x10\xdf\xa8\x81\x1e\x44\x7d\x3f\x69\x1f\xd7\x2d\x07\x6a\xd8\x4b\x55\x33\x43\xd5\xba\x3b\x7b\x04\xb6\x3f\x88\xda\x57\x28\x4f\x25\xcf\x4b\xeb\xf8\xb6\x3b\x6a\x98\xd2\xae\xb5\x3a\x77\x67\xd9\xfb\xbc\xf3\x77\xb6\xdb\x18\xd9\x40\x23\x35\xb7\x78\x49\xbe\x9e\x67\x16\xde\x21\x44\x0a\x1d\x63\x20\x5c\x0c\x8e\xac\xe2\xc5\x55\xa0\x9f\x4e\x81\x6f\x6c\xbe\x4f\xfb\xf1\x50\x59\xaf\x21\xa9\xaa\xc8\xa4\x64\x16\x64\x79\x19\x58\x9f\x40\x6a\x6f\xe3\x4d\xa4\xdd\xc8\x7f\xa6\x95\x1a\xdc\x43\x04\x9a\x7d\x21\x32\x68\xef\x15\x9d\x7c\x54\x10\xf0\x02\x8b\xcf\x35\xeb\xab\x48\x4f\x52\x81\x90\xd6\x6d\xa9\x13\x6c\x95\xc0\x02\x94\x45\xe2\x3c\xb7\x61\xca\x70\x56\xc1\x85\x51\x2d\x5e\xd2\xf2\x1e\xd2\xc5\x9e\x55\x1a\xa9\x2b\x2b\x99\x4e\x8a\xc2\xda\x87\x55\x77\xf6\xb8\xe9\x89\x9a\x69\x2e\x85\x61\x5c\xa0\xa2\x03\xd6\xba\xbc\x3e\x2e\x7e\xa6\x53\x96\x3f\xaa\xc3\xb2\x1a\xb5\x66\x87\x68\xa8\x6b\x27\xc3\x11\x6d\x98\x32\x73\xd9\x0a\x63\x8f\xdc\x00\xe5\xe6\xaf\x3a\x3d\xa2\x70\xea\x9e\x20\x66\x9b\xa6\x2d\xaf\x31\x82\x41\x6d\xd3\x68\xb0\x23\xb8\x92\xc5\x57\x49\xd5\xea\x2f\x16\x2b\xef\xd4\x68\x6f\x13\x63\x9d\xba\x9e\x1e\x49\x34\x9a\xed\xc4\xec\x5a\xfd\x29\x7d\xd8\x68\xef\x5b\xf0\x40\x04\xe7\x83\x05\xee\x19\x79\xa5\x35\x00\xe5\x30\x21\x4d\xe9\x8f\xd3\xa3\x90\x4f\x82\x5c\x7e\xbe\x89\x92\x36\xed\xf3\xeb\x35\x94\xc8\x2a\x53\x9e\x68\x6b\x89\x4c\x99\x1d\x32\xef\x59\x0a\x73\xe4\x47\x2c\x28\xd5\x2a\x3c\xb4\x15\x53\xc0\x85\x41\x45\xe5\xad\xcd\xb7\xa6\x74\x31\xc0\xdf\xe3\x11\x39\x85\xba\x91\xa2\x20\x04\x46\xda\xcb\x40\xd4\x46\x7b\x10\xef\xd2\xe4\x76\xfb\xee\xd7\x73\x10\xad\x08\x60\xd8\xb0\x39\x50\xcc\xdd\xd5\x2a\xd5\x0f\x12\x56\xfc\x99\x23\xcc\x2b\xd9\xba\x8c\xcf\xb5\x3f\x5e\x5d\x78\x19\x64\xb8\x82\x9d\x8d\x76\xe2\x5b\x03\xbf\xb7\xa8\x4e\x36\x9c\xd0\xd1\xd4\xb2\x46\x6f\x36\x9f\xc5\x15\x6a\xac\x77\x15\x6a\x78\xb7\xdd\xae\xbe\xd5\xf0\xfd\x77\xdf\x79\xeb\xf7\xfa\x9b\x06\x6f\xa3\xfd\x41\xda\xcb\x47\xae\x07\xac\x5e\x8e\x9f\xd6\xab\x79\x27\x01\xe5\x8b\x9d\x42\xf6\xa8\xdf\x58\x02\xa5\x6c\xd0\x45\x63\x66\xfa\xd2\xa1\x13\xdc\xd2\xcd\x09\xe8\x8e\xe5\x8f\x54\xa8\x70\x81\x56\x64\x3a\xfc\x35\xc5\x16\xf0\x88\x1c\x12\x8f\x73\x91\x6d\xe6\xf7\xcb\x65\x3a\xdf\xda\x0a\x6f\xac\x67\xea\x2d\xc9\x36\x4f\x25\x8a\xb1\xa2\xb9\x1b\x69\x94\xcc\x51\x6b\x0a\x9d\xdd\xf2\x4e\x07\xab\x45\xb2\x75\x65\xa4\xa3\x7b\xe4\xff\xe2\x5d\xbd\xd4\x49\xee\xd4\x4e\x43\x14\xb6\x34\x1d\x61\x26\x4e\x20\x6d\x30\xdb\xb7\xca\x65\x53\xe7\xc6\xee\x12\x4e\x03\xdb\xc9\xd6\xa9\xe0\xc9\x47\x3d\x6e\x42\xdf\x94\x6a\x0c\xe5\x5c\x46\x8f\xe5\x89\x69\x30\xea\xe4\xfd\xcf\x31\x70\x90\xf6\xf6\x9e\xac\xf3\x1a\x21\x9f\x48\x60\x06\x3b\x56\x44\x0a\xb4\x42\xa6\x43\x8d\x3c\xd2\x60\x81\x07\xc5\x8a\xc1\xc0\x81\xfe\x2a\xfe\x88\xd5\x89\xd8\xee\x30\xf0\x38\xe2\x5d\xf3\x43\x69\x68\xd8\x5e\xb9\x78\x57\xa5\x36\xa3\xb3\x5a\xfa\xd3\x3a\x59\xb8\x12\xdc\x45\xe2\xe0\x4a\x2e\xee\x20\xba\x98\x14\x05\x84\x2e\xf6\xbd\xeb\xbc\x3f\x0a\x63\x4e\x35\xe3\x0b\xd6\xe1\x61\xe3\xe5\x99\xb3\xae\x59\xa1\x31\xa7\xf9\xf4\xe4\xf9\x6d\x7e\x17\x0c\x95\xac\x56\x15\x13\xd8\xc7\x60\x5b\xe5\xf5\x5f\x2e\xf8\xf5\x31\x60\xc1\x0c\xfb\xf4\x72\xd1\xd6\x4b\x59\xa0\xf6\x71\xd2\x0e\x64\x42\x1b\xd5\x52\xe7\x85\x45\x3c\xe9\xb4\x76\x77\x1e\xbd\x1b\x85\x47\x2e\x5b\xbd\x99\x52\xeb\xd9\x7c\x94\x5b\xc6\xc6\x8a\xdf\x80\x7c\x23\xfd\x88\xe2\xbc\x43\x1c\x6e\xf2\xec\xaa\xb3\xfb\x10\x6e\xe7\x6e\xb9\x78\x8c\xf6\xbe\x86\xf5\x27\x1e\x3a\x2c\xf5\xf1\xfb\xc6\xa7\x6e\x33\xc6\xdd\xe6\x17\xb2\xe9\x1e\x33\x7c\xa6\x76\x3c\xaf\xcf\x50\x58\x65\x3f\x57\xdd\xea\x10\xc1\x91\xeb\xbf\x6f\xee\x97\x5f\x03\x22\x7e\x7c\xf9\x22\x49\x6d\x55\xd4\xa1\x8c\x8b\xa1\x2f\x62\xfe\x82\xfc\xa3\x67\x21\x7f\x12\x62\xd1\xfb\x56\x2e\x78\x11\xb4\x64\x00\xa2\x3e\xdb\x7e\xde\x66\xcb\x87\x7f\x7e\x48\xee\x16\x3f\xfc\xa5\x1b\x5a\x24\xeb\x5f\xb2\x65\x3c\x36\xbf\x5f\x6e\x93\x6c\x99\xae\x3f\x6c\xd2\xed\x87\x5f\x93\xbb\xdb\xcd\xf4\xd4\x04\xbd\x78\xc1\x36\xbd\x5b\xdd\x52\x2c\x74\x44\x7a\x6f\x1f\x9e\x2b\xdd\x13\xb0\x8a\x7c\x57\x97\xec\xcf\xdf\xff\x10\xc9\x78\x7e\x73\x14\x5c\x3e\x3b\x9b\x9d\xdf\xe4\x9d\x6f\x0c\x2e\x90\xdd\xb1\x79\xe1\xc2\xcd\x59\xd0\x5d\xb1\xfe\x49\x61\x65\x5f\x2a\x08\xba\x7e\xd3\xd5\x82\x76\x6e\xb2\x10\x0c\x6e\x78\xa7\xfb\x55\x1b\x6a\xe5\x41\x06\x4d\x0d\x71\xd0\x66\x22\x8a\xea\xb6\x69\xa4\x32\xba\xbf\x42\x8d\x6e\xe4\xfa\x87\x9d\x74\x74\x91\x3c\xdc\x26\x8e\xaf\x92\x7b\x8f\x19\x9e\xdb\xac\x14\xab\xb0\xdf\x5f\xdd\x7c\x58\xa7\xdb\x74\xb9\xcd\xee\x97\x43\xf9\x1b\xbe\x8c\x4d\x09\x7e\x64\x55\x8b\xe7\xa1\x6a\x78\x83\xb3\xbb\xfa\x9b\xec\xe8\x35\x6c\x93\x97\x58\x77\xaf\x87\x55\x25\x9f\xe6\xad\x36\xb2\x4e\x9f\x49\xfa\x87\xf5\x6d\x24\x99\x5d\x90\x09\x8d\x79\xab\x70\x7b\xbb\x89\x26\x7d\x39\x1b\xec\x9c\x06\x14\xf2\x9d\x14\x67\xd2\x72\x67\x2e\xf5\x15\x5a\x79\x99\x80\x1e\x69\x68\x6a\x8d\xff\x43\xc1\x58\x3d\xbd\x2b\xf1\x09\xbd\xf4\xa2\x4f\xbe\x49\x7c\xc4\x2c\x5f\xcb\xec\x35\x50\x0a\x1e\xfc\x33\x3e\x3c\xa3\xf7\x80\xcf\x88\xb9\x13\x27\x68\x6f\x3b\x03\x91\x9f\x36\x7d\x8a\x1e\x3f\xa7\x8c\xfe\x95\x91\x2d\x9c\x38\xee\xb5\x78\xfc\x10\xb0\xa2\x0a\xde\x4c\xb4\xb4\x2f\xbc\x8f\xfe\xbf\x51\x9f\xc7\xfe\x69\x49\x3e\x62\xac\x49\x19\x63\x6f\x9c\x12\xf2\xb3\x6e\xe0\x46\x82\x4d\xc8\x75\x2e\xd6\x84\x54\x13\x42\x7d\x44\xa6\x3f\x66\xff\x09\x00\x00\xff\xff\x29\x1b\x29\x1c\x54\x24\x00\x00")

func _03_auth_schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		__03_auth_schemaGraphql,
		"03_auth_schema.graphql",
	)
}

func _03_auth_schemaGraphql() (*asset, error) {
	bytes, err := _03_auth_schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_auth_schema.graphql", size: 9300, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_base_schema.graphql":   _01_base_schemaGraphql,
	"02_unauth_schema.graphql": _02_unauth_schemaGraphql,
	"03_auth_schema.graphql":   _03_auth_schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"01_base_schema.graphql":   &bintree{_01_base_schemaGraphql, map[string]*bintree{}},
	"02_unauth_schema.graphql": &bintree{_02_unauth_schemaGraphql, map[string]*bintree{}},
	"03_auth_schema.graphql":   &bintree{_03_auth_schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
