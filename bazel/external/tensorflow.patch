diff --git a/tensorflow/workspace1.bzl b/tensorflow/workspace1.bzl
index 809b811eb1a..c9341ee70bc 100644
--- a/tensorflow/workspace1.bzl
+++ b/tensorflow/workspace1.bzl
@@ -7,8 +7,9 @@ load("@io_bazel_rules_closure//closure:defs.bzl", "closure_repositories")
 load("@rules_cuda//cuda:dependencies.bzl", "rules_cuda_dependencies")
 
 def workspace():
-    native.register_toolchains("@local_config_python//:py_toolchain")
-    rules_cuda_dependencies()
+    # Disable py_toolchain, since I can't get it to work. If someone needs it in the future they'll have to figure out tensorflow's //third_party/py:python_configure.bzl system.
+    # Disable rules_cc patching for CUDA since we don't need CUDA and it doesn't work with Pixie's build system.
+    rules_cuda_dependencies(with_rules_cc=False)
 
     closure_repositories()
 
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 82d0f71ccbd..94104822e98 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -12,7 +12,6 @@ def repo(name):
         sha256 = LLVM_SHA256,
         strip_prefix = "llvm-project-{commit}".format(commit = LLVM_COMMIT),
         urls = [
-            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/llvm/llvm-project/archive/{commit}.tar.gz".format(commit = LLVM_COMMIT),
             "https://github.com/llvm/llvm-project/archive/{commit}.tar.gz".format(commit = LLVM_COMMIT),
         ],
         build_file = "//third_party/llvm:llvm.BUILD",
diff --git a/third_party/repo.bzl b/third_party/repo.bzl
index 795f0b00b98..eb594737728 100644
--- a/third_party/repo.bzl
+++ b/third_party/repo.bzl
@@ -20,12 +20,8 @@ def tf_mirror_urls(url):
     Given a URL, it returns a list of the TF-mirror cache version of that URL
     and the original URL, suitable for use in `urls` field of `tf_http_archive`.
     """
-    if not url.startswith("https://"):
-        return [url]
-    return [
-        "https://storage.googleapis.com/mirror.tensorflow.org/%s" % url[8:],
-        url,
-    ]
+    # Don't use google's mirrors since some of them are broken.
+    return [url]
 
 def _get_env_var(ctx, name):
     if name in ctx.os.environ:
@@ -106,23 +102,10 @@ def tf_http_archive(name, sha256, urls, **kwargs):
     labels (e.g. '@foo//:bar') or from a label created in their repository (e.g.
     'str(Label("//:bar"))').
     """
-    if len(urls) < 2:
-        fail("tf_http_archive(urls) must have redundant URLs.")
-
-    if not any([mirror in urls[0] for mirror in (
-        "mirror.tensorflow.org",
-        "mirror.bazel.build",
-        "storage.googleapis.com",
-    )]):
-        fail("The first entry of tf_http_archive(urls) must be a mirror " +
-             "URL, preferrably mirror.tensorflow.org. Even if you don't have " +
-             "permission to mirror the file, please put the correctly " +
-             "formatted mirror URL there anyway, because someone will come " +
-             "along shortly thereafter and mirror the file.")
+
+    # Don't check for mirrors, because for whatever reason some of the mirrors are broken.
 
     if native.existing_rule(name):
-        print("\n\033[1;33mWarning:\033[0m skipping import of repository '" +
-              name + "' because it already exists.\n")
         return
 
     _tf_http_archive(
