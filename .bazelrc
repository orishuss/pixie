# Global bazelrc file, see https://docs.bazel.build/versions/master/guide.html#bazelrc.

# This is to flush bazel cache for new version of clang/gcc.
build --action_env=CLANG_COMPILER_VERSION=13.0_0
build --host_action_env=CLANG_COMPILER_VERSION=13.0_0
build:clang --action_env=CC=/opt/clang-13.0/bin/clang
build:clang --host_action_env=CC=/opt/clang-13.0/bin/clang
build:clang --action_env=CXX=/opt/clang-13.0/bin/clang++
build:clang --host_action_env=CXX=/opt/clang-13.0/bin/clang++

# Get version information into the build.
build --workspace_status_command=bazel/get_workspace_status.sh

# We only have support for python3 on the Ubuntu 20.04 image.
build --host_force_python=PY3

# Limit memory for JVM to reduce runaway usage.
startup --host_jvm_args=-Xmx1500m

# For all builds, by default, exclude tests that require root or BPF privileges.
# To run a test that was filtered out:
# bazel test //path/to:test --test_tag_filter=
# Which reset the filter to empty.
build --test_tag_filters=-requires_root,-requires_bpf,-disabled

# Sets the default Apple platform to macOS.
build --apple_platform_type=macos

# Keep debug symbols (required for go binaries).
# Unfortunately, this affects C++ with -c fastbuild too.
# Upgrading io_bazel_rules_go provides a better way to do this, but that upgrade is a tangled web.
# TODO(oazizi): Remove after upgrading io_bazel_rules_go.
build --strip=never

# Give each sandbox its own tmp directory.
# This is important for //src/stirling/utils:java_test, which otherwise creates conflicting writes
# when multiple instances are running simultaneously.
# It is also generally not a bad idea, since it improves heremeticity.
# For more context, see: https://github.com/bazelbuild/bazel/issues/3236
test --sandbox_tmpfs_path=/tmp

# Build for Clang:
build:clang --linkopt -fuse-ld=lld
build:clang --host_linkopt -fuse-ld=lld
build:clang --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
build:clang --host_action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
build:clang --action_env=BAZEL_LINKOPTS=-lm:-static-libgcc
build:clang --host_action_env=BAZEL_LINKOPTS=-lm:-static-libgcc
# We need this to ensure that external projects are built with
# C++17 support. This is needed in some libraries like absl which
# have different behavior with C++17.
build:clang --action_env=BAZEL_CXXOPTS=-std=c++17:-fPIC
build:clang --host_action_env=BAZEL_CXXOPTS=-std=c++17:-fPIC
build:clang --action_env=BAZEL_COMPILER=clang
build:clang --host_action_env=BAZEL_COMPILER=clang
build:clang --action_env=CC=clang
build:clang --host_action_env=CC=clang
build:clang --action_env=CXX=clang++
build:clang --host_action_env=CXX=clang++

# Build for Clang using Libc++.
build:libc++ --action_env=CXXFLAGS=-stdlib=libc++
build:libc++ --action_env=LDFLAGS=-stdlib=libc++
build:libc++ --action_env=BAZEL_CXXOPTS=-std=c++17:-stdlib=libc++:-fPIC
build:libc++ --action_env=BAZEL_LINKLIBS=-l%:libc++.a:-l%:libc++abi.a:-lm
build:libc++ --action_env=CC=/opt/clang-13.0-libc++/bin/clang
build:libc++ --action_env=CXX=/opt/clang-13.0-libc++/bin/clang++
build:libc++ --define use_libcpp=1
# TODO(zasgar): Remove this in next diff.
build:libc++ --copt -D_LIBCPP_NO_EXPERIMENTAL_DEPRECATION_WARNING_FILESYSTEM
build:libc++ --build_tag_filters=-no_libcpp
build:libc++ --test_tag_filters=-no_libcpp,-requires_root,-requires_bpf,-disabled

# Build for GCC.
build:gcc --linkopt -fuse-ld=lld
build:gcc --host_linkopt -fuse-ld=lld
build:gcc --action_env=BAZEL_LINKLIBS=-l%:libstdc++.a
build:gcc --action_env=BAZEL_LINKOPTS=-lm:-static-libgcc
# We need this to ensure that external projects are built with
# C++17 support. This is needed in some libraries like absl which
# have different behavior with C++17.
build:gcc --action_env=BAZEL_CXXOPTS=-std=c++17:-fPIC
build:gcc --action_env=BAZEL_COMPILER=gcc
build:gcc --action_env=CC=/usr/bin/gcc-10
build:gcc --action_env=CXX=/usr/bin/g++-10
# These are copts because they apply to both c++ and c files.
# In particular, upb is has issues with this that will hopefully be
# fixed upstream soon.
build:gcc --copt -Wno-error=sign-compare
build:gcc --copt -Wno-error=stringop-truncation
build:gcc --copt -Wno-error=maybe-uninitialized
build:gcc --build_tag_filters=-no_gcc
build:gcc --test_tag_filters=-no_gcc,-requires_root,-requires_bpf,-disabled

# Default mac config. Same as clang except we can't statically link,
# and mac does not use libstdc++.
build:macos --action_env=BAZEL_LINKLIBS
build:macos --action_env=BAZEL_LINKOPTS

# bazel build --config asan ...
build:asan --config=clang
build:asan --define PL_CONFIG_ASAN=1
build:asan --copt -DPL_CONFIG_ASAN
build:asan --copt -D__SANITIZE_ADDRESS__
build:asan --copt -fsanitize=address,undefined
build:asan --linkopt -fsanitize=address,undefined
build:asan --copt -fno-sanitize=vptr
build:asan --linkopt -fno-sanitize=vptr
build:asan --copt -fsanitize-recover=all
build:asan --linkopt -ldl
build:asan --define tcmalloc=disabled
build:asan --build_tag_filters=-no_asan
build:asan --test_tag_filters=-no_asan,-requires_root,-requires_bpf,-disabled
build:asan --define signal_trace=disabled
build:asan --copt -DADDRESS_SANITIZER=1
build:asan --test_env=ASAN_SYMBOLIZER_PATH
build:asan --test_env=ASAN_OPTIONS=handle_abort=1:allow_addr2line=true
build:asan --test_env=UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1
build:asan --define tcmalloc=disabled
# Clang-10 requires additional linkopts to make sure ubsan is linked in correctly.
build:asan --linkopt=-L/opt/clang-13.0/lib/clang/13.0.0/lib/linux
build:asan --linkopt=-l:libclang_rt.ubsan_standalone-x86_64.a
build:asan --linkopt=-l:libclang_rt.ubsan_standalone_cxx-x86_64.a
build:asan --linkopt=-l:libclang_rt.builtins-x86_64.a

# bazel build --config msan
build:msan --define PL_CONFIG_MSAN=1
build:msan --copt -fsanitize=memory
build:msan --linkopt -fsanitize=memory
build:msan --define tcmalloc=disabled
build:msan --build_tag_filters=-no_msan
build:msan --test_tag_filters=-no_msan,-requires_root,-requires_bpf,-disabled
build:msan --copt -fsanitize-memory-track-origins=2
build:msan --define tcmalloc=disabled
build:msan --copt -DMEMORY_SANITIZER=1

# bazel build --config tsan
build:tsan --config=clang
build:tsan --define PL_CONFIG_TSAN=1
build:tsan --copt -fsanitize=thread
build:tsan --copt -fsanitize-recover=all
build:tsan --linkopt -fsanitize=thread
build:tsan --define tcmalloc=disabled
build:tsan --build_tag_filters=-no_tsan
build:tsan --test_tag_filters=-no_tsan,-requires_root,-requires_bpf,-disabled
build:tsan --define tcmalloc=disabled
build:tsan --copt -DTHREAD_SANITIZER=1
# This is needed to address false positive problem with abseil.
# https://github.com/google/sanitizers/issues/953
build:tsan --test_env=TSAN_OPTIONS=report_atomic_races=0

# Note that we are lumping tests that require root into the BPF tests below
# to minimize number of configs.
# If there are ever a lot of tests with requires_root, a new config is warranted.

# Note 2: BPF tests are limited to --jobs=4, because otherwise the parallel tests
# cause a lot of flakiness. In particular, many of the BPF tests deploy containers,
# and the sudden deployment of too many containers causes some containers to get
# stuck for minutes without actually running.

# bazel build --config bpf
build:bpf --config=clang
build:bpf --build_tag_filters=requires_bpf,requires_root
build:bpf --test_tag_filters=requires_bpf,requires_root,-disabled
test:bpf --jobs=4 --strategy=TestRunner=standalone

# bazel build --config bpf_asan
# Need to repeat the negative build_tag_filters from config=asan,
# because the positive build_tag_filters here can re-enable such tests.
build:bpf_asan --config=asan
build:bpf_asan --build_tag_filters=requires_bpf,requires_root,-no_asan
build:bpf_asan --test_tag_filters=requires_bpf,requires_root,-no_asan,-disabled
test:bpf_asan --jobs=4 --strategy=TestRunner=standalone

# bazel build --config bpf_tsan
# Need to repeat the negative build_tag_filters from config=tsan,
# because the positive build_tag_filters here can re-enable such tests.
build:bpf_tsan --config=tsan
build:bpf_tsan --build_tag_filters=requires_bpf,requires_root,-no_tsan
build:bpf_tsan --test_tag_filters=requires_bpf,requires_root,-no_tsan,-disabled
test:bpf_tsan --jobs=4 --strategy=TestRunner=standalone

# bazel build --config go_race
build:go_race --config=clang
build:go_race --define tcmalloc=disabled
build:go_race --@io_bazel_rules_go//go/config:race
test:go_race --define tcmalloc=disabled
test:go_race --@io_bazel_rules_go//go/config:race
run:go_race --define tcmalloc=disabled
run:go_race --@io_bazel_rules_go//go/config:race


coverage --config=gcc
coverage --cxxopt -fprofile-arcs
coverage --cxxopt -ftest-coverage
coverage --instrument_test_targets
coverage --define PL_COVERAGE=true
coverage --copt -DPL_COVERAGE
coverage --test_tag_filters=-requires_root,-requires_bpf,-no_coverage,-disabled,-no_gcc
# Uploading to BES from the coverage build seems to fail on jenkins.
coverage --experimental_build_event_upload_strategy=local

# Use stable GIT build tag by default.
build --define BUNDLE_VERSION={STABLE_BUILD_TAG}

# jenkins.bazelrc is copied from ci/jenkins.bazelrc by Jenkins workers during the build.
# The intention is to avoid polluting configurations of bazel for developers.
try-import %workspace%/jenkins.bazelrc

# Put your own configurations into user.bazelrc, which is ignored by git.
try-import %workspace%/user.bazelrc

# Import a machine specific bazelrc. This can be used to enable caching.
try-import /etc/bazelrc

try-import %workspace%/bes.bazelrc

# Tensorflow requires this option
common --experimental_repo_remote_exec

# Try Stirling flakes more than the default 3 times.
test --flaky_test_attempts=//src/stirling/source_connectors/socket_tracer/.*bpf_test@5

# Disable XNNPACK for tensorflow lite. There's currently an ASAN issue with XNNPACK, so disable for now.
build --define=tflite_with_xnnpack=false
